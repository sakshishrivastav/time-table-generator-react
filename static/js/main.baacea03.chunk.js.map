{"version":3,"sources":["utils/generateSchedule.js","App.js","utils/useForm.js","reportWebVitals.js","index.js"],"names":["generateSchedule","info","subjects","getSchedule","size","slots","forEach","subject","remaining","hours","push","name","needsChange","adj","maxSize","totalHours","workingDays","parseInt","perDay","length","rows","array","rowSize","result","i","splice","splitArray","App","initialFormData","useState","formData","updateFormData","handleField","e","schema","errorMessage","validateSync","target","value","error","message","checkValidationError","Object","keys","every","key","useForm","workingHours","totalSubject","subjectPerDay","form1","setForm1","checkValidation1","setSubjects","steps","setSteps","schedule","setSchedule","validstep2","total","isvalid","x","checkSubjectsValidity","className","htmlFor","type","id","placeholder","onChange","number","typeError","required","positive","integer","min","max","onClick","Array","from","n","map","copiedValues","string","handleSubjectUpdate","handleSubjectHour","console","log","subjectsInfo","scope","row","day","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.baacea03.chunk.js","sourcesContent":["const splitArray = (array, size) => {\n    let rowSize = parseInt(array.length/size)\n    let result = [];\n    for(let i=0; i<rowSize; i++){\n        result.push(array.splice(0, size));\n    }\n    return result;\n}\n\nconst generateSchedule = (info, subjects) => {\n  \n    const getSchedule = (size) =>{\n        const slots = [];\n        subjects.forEach(subject => {\n            let remaining= +subject.hours;\n            while (remaining) {\n                if(remaining>size){\n                    slots.push({name:subject.name, hours: size})\n                    remaining = remaining - size;\n                }else {\n                    slots.push({name:subject.name, hours: remaining})\n                    remaining = remaining - remaining;\n                }\n            }\n            \n        });\n        return slots;\n    }\n\n    let needsChange = true;\n    let adj = 0;\n    let slots = [];\n    const maxSize = info.totalHours/info.workingDays\n    while(needsChange){\n        const size = parseInt(maxSize/info.perDay)+adj;\n        // console.log(\"Getting Called New size \",size);\n        slots = getSchedule(size);\n        if(slots.length<=info.perDay*info.workingDays){\n            needsChange = false;\n        }\n        if(size+adj<maxSize){\n            adj = adj+1;\n        }else needsChange = false;\n    }\n\n    const rows = splitArray(slots, info.workingDays);\n    if(rows.length<=info.workingDays)return rows;\n    else return \"Not Feasible to Calculate ! Please readjust and try again with different values - Hint: Try Changing Working Days or Number of Subjects\"\n  \n};\nexport default generateSchedule;\n\n\n\n\n","import React, { useState } from \"react\";\nimport { useForm } from \"./utils/useForm\";\nimport { number, string } from \"yup\";\nimport generateSchedule from \"./utils/generateSchedule\";\n\nfunction App() {\n  const {\n    formData: form1,\n    handleField: setForm1,\n    checkValidationError: checkValidation1,\n  } = useForm({\n    workingDays: null,\n    workingHours: null,\n    totalSubject: null,\n    subjectPerDay: null,\n  });\n\n  const [subjects, setSubjects] = useState([]);\n  const [steps, setSteps] = useState([true, false, false]);\n  const [schedule, setSchedule] = useState([]);\n\n  const handleSubjectUpdate = (e, i) => {\n    const copiedValues = [...subjects];\n    if (!copiedValues[i]) {\n      copiedValues[i] = {\n        subject: { value: \"\", error: \"\" },\n        hours: { value: \"\", error: \"Required\" },\n      };\n    }\n    copiedValues[i].subject.value = e.target.value;\n    try {\n      string().required().min(3).validateSync(e.target.value);\n      copiedValues[i].subject.error = \"\";\n    } catch (error) {\n      copiedValues[i].subject.error = error.message;\n    }\n    setSubjects(copiedValues);\n  };\n\n  const handleSubjectHour = (e, i) => {\n    const copiedValues = [...subjects];\n    if (!copiedValues[i]) {\n      copiedValues[i] = {\n        subject: { value: \"\", error: \"Required\" },\n        hours: { value: \"\", error: \"\" },\n      };\n    }\n    copiedValues[i].hours.value = e.target.value;\n    try {\n      number()\n        .typeError(\"Value must be a number\")\n        .required()\n        .positive()\n        .integer()\n        .min(1)\n        .validateSync(e.target.value);\n      copiedValues[i].hours.error = \"\";\n    } catch (error) {\n      copiedValues[i].hours.error = error.message;\n    }\n    setSubjects(copiedValues);\n  };\n\n  let error = \"\";\n  let validstep2 = false;\n  const checkSubjectsValidity = (subjects, total, totalSubject) => {\n    let totalHours = 0;\n    let isvalid = subjects.every((x) => {\n      totalHours = totalHours + parseInt(x?.hours.value);\n      if (\n        x?.hours.error === \"\" &&\n        x?.subject.error === \"\" &&\n        subjects.length === totalSubject\n      ) {\n        return true;\n      }\n      return false;\n    });\n    if (totalHours !== total) {\n      isvalid = false;\n      error = \"Total hours is not \" + total;\n    }\n\n    return isvalid;\n  };\n  if (steps[1]) {\n    validstep2 = checkSubjectsValidity(\n      subjects,\n      form1?.workingDays?.value * form1?.workingHours?.value,\n      +form1.totalSubject.value\n    );\n  }\n\n  const next = function () {\n    setSubjects([]);\n    setSteps([false, true, false]);\n  };\n\n  const _stepThree = () => {\n    setSteps([false, false, true]);\n    console.log(form1);\n    const info = {\n      workingDays: form1.workingDays.value,\n      totalHours: form1.workingDays.value * form1.workingHours.value,\n      perDay: form1.subjectPerDay.value,\n    };\n    const subjectsInfo = [];\n    subjects.forEach((x) => {\n      subjectsInfo.push({ name: x.subject.value, hours: x.hours.value });\n    });\n    setSchedule(generateSchedule(info, subjectsInfo));\n  };\n\n  // console.log(schedule);\n\n  return (\n    <div className=\"container\">\n      <div>\n        <h1 className=\"text-center\">Time Table Generator</h1>\n        <br />\n        <br />\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <h2>Add Basic Details</h2>\n          <h6>\n            Total Hours:\n            {form1.workingDays?.value * form1.workingHours?.value || 0}\n          </h6>\n        </div>\n        <br />\n      </div>\n      <div>\n        {steps[0] ? (\n          <div>\n            <div className=\"form-group mb-3\">\n              <label htmlFor=\"workingDays\">No of Working days:</label>\n              <input\n                name=\"workingDays\"\n                type=\"number\"\n                className={`form-control ${\n                  form1.workingDays?.errorMessage === \"\"\n                    ? \"is-valid\"\n                    : \"is-invalid\"\n                }`}\n                id=\"workingDays\"\n                placeholder=\"Working Days\"\n                onChange={(e) =>\n                  setForm1(\n                    e,\n                    number()\n                      .typeError(\"Value must be a number\")\n                      .required()\n                      .positive()\n                      .integer()\n                      .min(1)\n                      .max(7)\n                  )\n                }\n              />\n              <div className=\"invalid-feedback\">\n                {form1.workingDays?.errorMessage}\n              </div>\n            </div>\n            <div className=\"form-group mb-3\">\n              <label htmlFor=\"workingsHours\">No of Working hours</label>\n              <input\n                name=\"workingHours\"\n                type=\"number\"\n                className={`form-control ${\n                  form1.workingHours?.errorMessage === \"\"\n                    ? \"is-valid\"\n                    : \"is-invalid\"\n                }`}\n                id=\"workingHours\"\n                placeholder=\"Working Hours\"\n                required\n                onChange={(e) =>\n                  setForm1(\n                    e,\n                    number()\n                      .typeError(\"Value must be a number\")\n                      .required()\n                      .positive()\n                      .integer()\n                      .min(1)\n                      .max(10)\n                  )\n                }\n              />\n              <div className=\"invalid-feedback\">\n                {form1.workingHours?.errorMessage}\n              </div>\n            </div>\n            <div className=\"form-group mb-3\">\n              <label htmlFor=\"totalSubject\">Total Subject</label>\n              <input\n                name=\"totalSubject\"\n                type=\"number\"\n                className={`form-control ${\n                  form1.totalSubject?.errorMessage === \"\"\n                    ? \"is-valid\"\n                    : \"is-invalid\"\n                }`}\n                id=\"totalSubject\"\n                placeholder=\"Total Subject\"\n                required\n                onChange={(e) =>\n                  setForm1(\n                    e,\n                    number()\n                      .typeError(\"Value must be a number\")\n                      .required()\n                      .positive()\n                      .integer()\n                      .min(1)\n                  )\n                }\n              />\n              <div className=\"invalid-feedback\">\n                {form1.totalSubject?.errorMessage}\n              </div>\n            </div>\n            <div className=\"form-group mb-3\">\n              <label htmlFor=\"subjectPerDay\">Subject Per Day</label>\n              <input\n                name=\"subjectPerDay\"\n                type=\"number\"\n                className={`form-control ${\n                  form1.subjectPerDay?.errorMessage === \"\"\n                    ? \"is-valid\"\n                    : \"is-invalid\"\n                }`}\n                id=\"subjectPerDay\"\n                placeholder=\"Subject per day\"\n                required\n                onChange={(e) =>\n                  setForm1(\n                    e,\n                    number()\n                      .typeError(\"Value must be a number\")\n                      .required()\n                      .positive()\n                      .integer()\n                      .min(1)\n                      .max(form1.totalSubject.value)\n                  )\n                }\n              />\n              <div className=\"invalid-feedback\">\n                {form1.subjectPerDay?.errorMessage}\n              </div>\n            </div>\n            <br />\n            <br />\n            <br />\n            <div className=\"d-flex justify-content-center\">\n              <button\n                type=\"button\"\n                className={`btn btn-primary ${\n                  checkValidation1() ? \"\" : \"disabled\"\n                }`}\n                onClick={next}\n              >\n                Next\n              </button>\n            </div>\n          </div>\n        ) : null}\n        {steps[1] ? (\n          <div>\n            {Array.from(\n              Array(+form1.totalSubject?.value).keys(),\n              (n) => n + 1\n            ).map((x, i) => {\n              return (\n                <div key={\"subrow\" + x} className=\"row\">\n                  <div className=\"col-md-8 mb-3\">\n                    <label htmlFor={`subject${i}`}>Subject #{x}</label>\n                    <input\n                      type=\"text\"\n                      className={`form-control ${\n                        subjects[i]?.subject?.error === \"\"\n                          ? \"is-valid\"\n                          : \"is-invalid\"\n                      }`}\n                      id={`subject${i}`}\n                      required\n                      onChange={(e) => handleSubjectUpdate(e, i)}\n                    />\n                    <div className=\"invalid-feedback\">\n                      {subjects[i]?.subject?.error}\n                    </div>\n                  </div>\n                  <div className=\"col-md-4 mb-3\">\n                    <label htmlFor={`subjectHour${i}`}>Total Hours</label>\n                    <input\n                      type=\"text\"\n                      className={`form-control ${\n                        subjects[i]?.hours?.error === \"\"\n                          ? \"is-valid\"\n                          : \"is-invalid\"\n                      }`}\n                      id={`subjectHour${i}`}\n                      required\n                      onChange={(e) => handleSubjectHour(e, i)}\n                    />\n                    <div className=\"invalid-feedback\">\n                      {subjects[i]?.hours?.error}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n            <div className=\"text-danger\">{error.length ? error : null}</div>\n            <button\n              className={`btn btn-primary ${validstep2 ? \"\" : \"disabled\"}`}\n              onClick={_stepThree}\n            >\n              Generate Time Table\n            </button>\n          </div>\n        ) : null}\n      </div>\n\n      {steps[2] ? (\n        <div className=\"card bd-timetable\">\n          <h4 className=\"text-center\">Time Table</h4>\n          <br />\n          <br />\n          <div className=\"table-responsive\">\n            {typeof schedule !== \"string\" ? (\n              <table className=\"table table-bordered border-primary table-hover\">\n                <thead>\n                  <tr>\n                    {Array.from(\n                      Array(+form1.workingDays.value).keys(),\n                      (n) => n + 1\n                    ).map((x, i) => (\n                      <th key={\"th\" + i} scope=\"col\">\n                        Day #{x}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {schedule.map((row, i) => (\n                    <tr key={\"td\" + i}>\n                      {row.map((day) => (\n                        <td>\n                          {day.name} - {day.hours}Hours\n                        </td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            ) : (\n              <div className=\"text-danger text-center\">\n                <em><strong>{schedule}</strong></em><br /><br />\n                <button onClick={()=>window.location.reload()} className=\"btn btn-primary\">Recalculate</button>\n              </div>\n            )}\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from \"react\";\n// button type=\"button\" on form elements\nexport const useForm = (initialFormData={}) => {\n    const [formData, updateFormData] = useState(initialFormData)\n\n    const checkValidationError = () =>{\n        const keys = Object.keys(formData)\n        const isvalid = keys.every(key => {\n            if(formData[key]?.errorMessage === \"\"){\n                return true;\n            }\n            return false;\n        })\n        return isvalid;\n    }\n\n\n    const handleField = (e, schema) =>{\n        let errorMessage = \"\"\n        if(schema){\n            try {\n                schema.validateSync(e.target.value)\n            } catch (error) {\n                errorMessage = error.message\n            }\n        }\n\n\n        \n        updateFormData({\n            ...formData, \n            [e.target.name]: {\n                value: e.target.value,\n                errorMessage,\n            }\n        })\n    };\n\n    return {formData, handleField, checkValidationError}\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/time-table-generator-react\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}